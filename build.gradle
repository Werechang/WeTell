plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.24.4'
    id 'idea'
    id 'org.gradle.crypto.checksum' version '1.1.0'
}

import org.gradle.crypto.checksum.Checksum

group 'com.gebb'
version '1.0'

java {
    modularity.inferModulePath = true
}
modularity.disableEffectiveArgumentsAdjustment()

repositories {
    mavenLocal()
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def currentOs = org.gradle.internal.os.OperatingSystem.current()

task getOs() {
    if (currentOs.windows)
        return 'win'
    else if (currentOs.linux)
        return 'lin'
    else if (currentOs.macOsX)
        return 'mac'
    return ''
}

application {
    mainModule = 'com.gebb.wetell'
    mainClass = 'com.gebb.wetell.client.WeTellClient'
}

javafx {
    version = '15.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    targetPlatform("lin") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_linux_hotspot_15.0.2_7.tar.gz") {
            downloadDir = "$buildDir/jdkLin"
            archiveName = "lin-jdk"
            archiveExtension = "tar.gz"
            pathToHome = "jdk-15.0.2+7"
            overwrite = false
        }
    }
    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_mac_hotspot_15.0.2_7.tar.gz") {
            downloadDir = "$buildDir/jdkMac"
            archiveName = "mac-jdk"
            archiveExtension = "tar.gz"
            pathToHome = "jdk-15.0.2+7/Contents/Home"
            overwrite = false
        }
    }
    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_windows_hotspot_15.0.2_7.zip") {
            downloadDir = "$buildDir/jdkWin"
            archiveName = "win-jdk"
            archiveExtension = "zip"
            pathToHome = "jdk-15.0.2+7"
            overwrite = false
        }
    }

    launcher {
        noConsole = true
    }
    jpackage {
        if (currentOs.windows)
            targetPlatformName = 'win'
        else if (currentOs.linux)
            targetPlatformName = 'lin'
        else if (currentOs.macOsX)
            targetPlatformName = 'mac'
        else
            targetPlatformName = ''

        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/com/gebb/wetell/client/gui/icons/wetell.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources/com/gebb/wetell/client/gui"]
        installerOptions += ['--vendor', 'GEBB']

        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'wetell','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'wetell']
        }
    }
}

dependencies {

    implementation 'org.jetbrains:annotations:22.0.0'
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    testImplementation('org.junit.platform:junit-platform-runner:1.8.1')
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
}

// Testing workaround. Seems to work
configurations {
    testCompile {
        extendsFrom testImplementation
    }
}

test {

    dependsOn 'cleanTest'

    useJUnitPlatform {
        includeTags 'data'
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

task createChecksumSHA512(type: Checksum, dependsOn: 'jpackage') {
    if (currentOs.windows) {
        files = layout.files("$buildDir/jpackage/WeTell-${version}.exe", "$buildDir/jpackage/WeTell-${version}.msi")
    } else if (currentOs.macOsX) {
        files = layout.files("$buildDir/jpackage/WeTell-${version}.dmg")
    } else if (currentOs.linux) {
        files = layout.files("$buildDir/jpackage/WeTell-${version}.tar.gz")
    }
    outputDir = new File("${buildDir}", "generatedChecksumsSHA512")
    algorithm = Checksum.Algorithm.SHA512
}


task createChecksumMD5(type: Checksum, dependsOn: 'jpackage') {
    if (currentOs.windows) {
        files = layout.files("$buildDir/jpackage/WeTell-${version}.exe", "$buildDir/jpackage/WeTell-${version}.msi")
    } else if (currentOs.macOsX) {
        files = layout.files("$buildDir/jpackage/WeTell-${version}.dmg")
    } else if (currentOs.linux) {
        files = layout.files("$buildDir/jpackage/WeTell-${version}.tar.gz")
    }
    outputDir = new File("${buildDir}", "generatedChecksumsMD5")
    algorithm = Checksum.Algorithm.MD5
}

task moveChecksums(type: Copy, dependsOn: ['createChecksumSHA512', 'createChecksumMD5']) {
    from layout.buildDirectory.dir("generatedChecksumsSHA512"), layout.buildDirectory.dir("generatedChecksumsMD5")
    into layout.buildDirectory.dir("checksums")
}

task generateChecksums(type: Delete, dependsOn: 'moveChecksums') {
    delete layout.buildDirectory.dir("generatedChecksumsSHA512"), layout.buildDirectory.dir("generatedChecksumsMD5")
}